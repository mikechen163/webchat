generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  passwordHash String
  name         String?       // Add optional display name
  avatar       String?       // Add optional avatar URL
  language     String        @default("en")
  theme        String        @default("system")
  role         String        @default("user")
  createdAt    DateTime      @default(now())
  authSession  AuthSession[] // renamed from auth_session
  key          Key[]
  sessions     Session[]
}

model AuthSession {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Key {
  id              String  @id
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String   @default("New Chat")
  createdAt DateTime @default(now())
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id])
  role      String   // user or assistant
  content   String
  createdAt DateTime @default(now())
}

model ModelConfig {
  id           String    @id @default(cuid())
  name         String    @unique
  baseUrl      String
  apiKey       String
  model        String
  temperature  Float     @default(0.7)  // Add temperature setting
  maxTokens    Int       @default(2000) // Add max tokens limit
  userPrompt   String?   // Add optional system prompt
  enabled      Boolean   @default(true)
  providerId   String?   // Make it optional for migration
  provider     Provider? @relation(fields: [providerId], references: [id]) // Optional relation during migration

  @@index([providerId])
}

model Provider {
  id           String        @id @default(cuid())
  name         String        @unique
  type         String        // openai, gemini, anthropic, etc.
  baseUrl      String        @default("")
  apiKey       String?       // Add optional API key
  isCustom     Boolean       @default(false)
  modelConfigs ModelConfig[]
}
